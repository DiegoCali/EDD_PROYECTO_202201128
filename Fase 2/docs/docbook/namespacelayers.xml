<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespacelayers" xml:lang="en-US">
<title>layers Module Reference</title>
<indexterm><primary>layers</primary></indexterm>
<simplesect>
    <title>Data Types    </title>
        <itemizedlist>
            <listitem><para>type <link linkend="_structlayers_1_1layer">layer</link></para>

<para>Type to represent a pixel matrix 
<literallayout>&#160;&#xa;</literallayout>
 </para>
</listitem>
            <listitem><para>type <link linkend="_structlayers_1_1layers__tree">layers_tree</link></para>

<para>Type to represent a binary tree of layers. </para>
</listitem>
            <listitem><para>type <link linkend="_structlayers_1_1node__layer">node_layer</link></para>

<para>Type to represent a node of a linked list of layers. </para>
</listitem>
            <listitem><para>type <link linkend="_structlayers_1_1queue">queue</link></para>

<para>Type to represent a queue of layers. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions/Subroutines    </title>
        <itemizedlist>
            <listitem><para>subroutine <link linkend="_namespacelayers_1a2f6a28f55f06d1b9e3185c8d66565c94">gen_inorder</link> (this, tmp, limit, unit)</para>

<para>Subroutine to generate the matrix of pixels of a layer. </para>
</listitem>
            <listitem><para>subroutine <link linkend="_namespacelayers_1a62fdd4967404ab3716c20c7d26b5c85a">gen_postorder</link> (this, tmp, limit, unit)</para>

<para>Subroutine to generate the matrix of pixels of a layer. </para>
</listitem>
            <listitem><para>subroutine <link linkend="_namespacelayers_1a0ed365f0b16095d163777f59de1df24e">gen_preorder</link> (this, tmp, limit, unit)</para>

<para>Subroutine to generate the matrix of pixels of a layer. </para>
</listitem>
            <listitem><para>subroutine <link linkend="_namespacelayers_1a04b07ea98c9c0ed5bc02aac48658da24">traverse_limited</link> (this, order, limit, unit)</para>

<para>Subroutine to traverse the layers tree in a limited way. </para>
</listitem>
            <listitem><para>subroutine <link linkend="_namespacelayers_1a4bc63980800360e09a9a70bdcfaa89d8">enqueue</link> (this, layer_val)</para>

<para>Subroutine to add a layer to the layers tree. </para>
</listitem>
            <listitem><para>type(<link linkend="_structlayers_1_1layer">layer</link>) function, pointer <link linkend="_namespacelayers_1ad25129357b165705bdc177ced39efff4">dequeue</link> (this)</para>

<para>Subroutine to remove a layer from the queue. </para>
</listitem>
            <listitem><para>logical function <link linkend="_namespacelayers_1a86fec7533cdf35f649ae2d3398386907">is_empty</link> (this)</para>

<para>Function to check if the queue is empty. </para>
</listitem>
            <listitem><para>subroutine <link linkend="_namespacelayers_1a5e8ff04682cfccb6a7ef9d5f76e8fe21">traverse_matrix</link> (this)</para>

<para>Subroutine to traverse the layers tree. </para>
</listitem>
            <listitem><para>subroutine <link linkend="_namespacelayers_1a25ad57ef819385c8e57b4c5721381086">add</link> (this, new_layer)</para>

<para>Subroutine to add a layer to the layers tree. </para>
</listitem>
            <listitem><para>subroutine <link linkend="_namespacelayers_1ac64220c8e68adf04b346287ee3de0779">add_recursive</link> (this, new_layer, tmp)</para>

<para>Subroutine to add a layer to the layers tree recursively. </para>
</listitem>
            <listitem><para>subroutine <link linkend="_namespacelayers_1a16f1c46d15771cb49e0c83ef1d4f5c45">add_copied_val</link> (this, new_layer)</para>

<para>Subroutine to add a layer to the layers tree. </para>
</listitem>
            <listitem><para>type(<link linkend="_structlayers_1_1layer">layer</link>) function, pointer <link linkend="_namespacelayers_1a20d88ea9094c055aff2beca2e47c8e8d">search</link> (this, id_searched)</para>

<para>Function to search a layer in the layers tree. </para>
</listitem>
            <listitem><para>subroutine <link linkend="_namespacelayers_1aaf614f9b9b7fe9bbf2b3d279c55476be">preorder</link> (this, tmp)</para>

<para>Subroutine to traverse the layers tree in preorder. </para>
</listitem>
            <listitem><para>subroutine <link linkend="_namespacelayers_1a52cbda60e34fee30e8cce5cb87b7ad65">inorder</link> (this, tmp)</para>

<para>Subroutine to traverse the layers tree in inorder. </para>
</listitem>
            <listitem><para>subroutine <link linkend="_namespacelayers_1a610f099d68d513f92fd43c602ed00fc1">postorder</link> (this, tmp)</para>

<para>Subroutine to traverse the layers tree in postorder. </para>
</listitem>
            <listitem><para>subroutine <link linkend="_namespacelayers_1afdc1ff48487b915767d34ece44dc8535">gen_dot</link> (this, tmp, unit)</para>

<para>Subroutine to generate the dot file of the layers tree. </para>
</listitem>
            <listitem><para>subroutine <link linkend="_namespacelayers_1a9d6ceae507c9805271b15d962bbdd56b">gen_dot_recursive</link> (this, tmp, unit)</para>

<para>Subroutine to generate the dot file of the layers tree recursively. </para>
</listitem>
            <listitem><para>subroutine <link linkend="_namespacelayers_1a414a6810bc1629cc5c9340c10ed841d7">max_depth</link> (this)</para>

<para>Subroutine to calculate the max depth of the layers tree. </para>
</listitem>
            <listitem><para>recursive integer function <link linkend="_namespacelayers_1a8fb9ba5d1bd2e6405b2546d0a23d202e">max_depth_rec</link> (this, root)</para>

<para>Function to calculate the max depth of the layers tree recursively. </para>
</listitem>
            <listitem><para>subroutine <link linkend="_namespacelayers_1a815df7ccd4cede1692c60ec1e4cb86eb">leaf_layers</link> (this)</para>

<para>Subroutine to traverse the leaf layers of the layers tree. </para>
</listitem>
            <listitem><para>subroutine <link linkend="_namespacelayers_1ac93277cfc9c8e94020013f78bfb5aad8">leaf_layers_rec</link> (this, tmp)</para>

<para>Subroutine to traverse the leaf layers of the layers tree recursively. </para>
</listitem>
            <listitem><para>subroutine <link linkend="_namespacelayers_1a1071675842783fc100b474fb4d4ac20c">list_layers</link> (this, option)</para>

<para>Subroutine to list the layers of the layers tree. </para>
</listitem>
            <listitem><para>subroutine <link linkend="_namespacelayers_1a979adcf17af1e6b9b660725b2a018db4">inorder_print</link> (this, tmp)</para>

<para>Subroutine to print the layers of the layers tree in inorder. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function/Subroutine Documentation</title>
<anchor xml:id="_namespacelayers_1a25ad57ef819385c8e57b4c5721381086"/>    <section>
    <title>add()</title>
<indexterm><primary>add</primary><secondary>layers</secondary></indexterm>
<indexterm><primary>layers</primary><secondary>add</secondary></indexterm>
<para><computeroutput>subroutine layers::add (class(<link linkend="_structlayers_1_1layers__tree">layers_tree</link>), intent(inout) this, type(<link linkend="_structlayers_1_1layer">layer</link>), intent(in), pointer new_layer)</computeroutput></para><para>

<para>Subroutine to add a layer to the layers tree. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>this</entry>
                                <entry>
<para>Layers tree </para>
</entry>
                            </row>
                            <row>
                                <entry>new_layer</entry>
                                <entry>
<para>Layer to add </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 229 of file layers.f90.</para>
    </section><anchor xml:id="_namespacelayers_1a16f1c46d15771cb49e0c83ef1d4f5c45"/>    <section>
    <title>add_copied_val()</title>
<indexterm><primary>add_copied_val</primary><secondary>layers</secondary></indexterm>
<indexterm><primary>layers</primary><secondary>add_copied_val</secondary></indexterm>
<para><computeroutput>subroutine layers::add_copied_val (class(<link linkend="_structlayers_1_1layers__tree">layers_tree</link>), intent(inout) this, type(<link linkend="_structlayers_1_1layer">layer</link>), intent(in), pointer new_layer)</computeroutput></para><para>

<para>Subroutine to add a layer to the layers tree. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>this</entry>
                                <entry>
<para>Layers tree </para>
</entry>
                            </row>
                            <row>
                                <entry>new_layer</entry>
                                <entry>
<para>Layer to add </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 264 of file layers.f90.</para>
    </section><anchor xml:id="_namespacelayers_1ac64220c8e68adf04b346287ee3de0779"/>    <section>
    <title>add_recursive()</title>
<indexterm><primary>add_recursive</primary><secondary>layers</secondary></indexterm>
<indexterm><primary>layers</primary><secondary>add_recursive</secondary></indexterm>
<para><computeroutput>subroutine layers::add_recursive (class(<link linkend="_structlayers_1_1layers__tree">layers_tree</link>), intent(inout) this, type(<link linkend="_structlayers_1_1layer">layer</link>), intent(in), pointer new_layer, type(<link linkend="_structlayers_1_1layer">layer</link>), intent(inout) tmp)</computeroutput></para><para>

<para>Subroutine to add a layer to the layers tree recursively. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>this</entry>
                                <entry>
<para>Layers tree </para>
</entry>
                            </row>
                            <row>
                                <entry>new_layer</entry>
                                <entry>
<para>Layer to add </para>
</entry>
                            </row>
                            <row>
                                <entry>tmp</entry>
                                <entry>
<para>Temporary layer </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 243 of file layers.f90.</para>
    </section><anchor xml:id="_namespacelayers_1ad25129357b165705bdc177ced39efff4"/>    <section>
    <title>dequeue()</title>
<indexterm><primary>dequeue</primary><secondary>layers</secondary></indexterm>
<indexterm><primary>layers</primary><secondary>dequeue</secondary></indexterm>
<para><computeroutput>type(<link linkend="_structlayers_1_1layer">layer</link>) function, pointer layers::dequeue (class(<link linkend="_structlayers_1_1queue">queue</link>), intent(inout) this)</computeroutput></para><para>

<para>Subroutine to remove a layer from the queue. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>this</entry>
                                <entry>
<para>Queue </para>
</entry>
                            </row>
                            <row>
                                <entry>layer_val</entry>
                                <entry>
<para>Layer removed </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 180 of file layers.f90.</para>
    </section><anchor xml:id="_namespacelayers_1a4bc63980800360e09a9a70bdcfaa89d8"/>    <section>
    <title>enqueue()</title>
<indexterm><primary>enqueue</primary><secondary>layers</secondary></indexterm>
<indexterm><primary>layers</primary><secondary>enqueue</secondary></indexterm>
<para><computeroutput>subroutine layers::enqueue (class(<link linkend="_structlayers_1_1queue">queue</link>), intent(inout) this, type(<link linkend="_structlayers_1_1layer">layer</link>), intent(in), pointer layer_val)</computeroutput></para><para>

<para>Subroutine to add a layer to the layers tree. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>this</entry>
                                <entry>
<para>Layers tree </para>
</entry>
                            </row>
                            <row>
                                <entry>new_layer</entry>
                                <entry>
<para>Layer to add </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 160 of file layers.f90.</para>
    </section><anchor xml:id="_namespacelayers_1afdc1ff48487b915767d34ece44dc8535"/>    <section>
    <title>gen_dot()</title>
<indexterm><primary>gen_dot</primary><secondary>layers</secondary></indexterm>
<indexterm><primary>layers</primary><secondary>gen_dot</secondary></indexterm>
<para><computeroutput>subroutine layers::gen_dot (class(<link linkend="_structlayers_1_1layers__tree">layers_tree</link>), intent(inout) this, type(<link linkend="_structlayers_1_1layer">layer</link>), intent(in), pointer tmp, integer, intent(in) unit)</computeroutput></para><para>

<para>Subroutine to generate the dot file of the layers tree. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>this</entry>
                                <entry>
<para>Layers tree </para>
</entry>
                            </row>
                            <row>
                                <entry>tmp</entry>
                                <entry>
<para>Layer </para>
</entry>
                            </row>
                            <row>
                                <entry>unit</entry>
                                <entry>
<para>Unit to write the dot file </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 351 of file layers.f90.</para>
    </section><anchor xml:id="_namespacelayers_1a9d6ceae507c9805271b15d962bbdd56b"/>    <section>
    <title>gen_dot_recursive()</title>
<indexterm><primary>gen_dot_recursive</primary><secondary>layers</secondary></indexterm>
<indexterm><primary>layers</primary><secondary>gen_dot_recursive</secondary></indexterm>
<para><computeroutput>subroutine layers::gen_dot_recursive (class(<link linkend="_structlayers_1_1layers__tree">layers_tree</link>), intent(inout) this, type(<link linkend="_structlayers_1_1layer">layer</link>), intent(in), pointer tmp, integer, intent(in) unit)</computeroutput></para><para>

<para>Subroutine to generate the dot file of the layers tree recursively. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>this</entry>
                                <entry>
<para>Layers tree </para>
</entry>
                            </row>
                            <row>
                                <entry>tmp</entry>
                                <entry>
<para>Layer </para>
</entry>
                            </row>
                            <row>
                                <entry>unit</entry>
                                <entry>
<para>Unit to write the dot file </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 363 of file layers.f90.</para>
    </section><anchor xml:id="_namespacelayers_1a2f6a28f55f06d1b9e3185c8d66565c94"/>    <section>
    <title>gen_inorder()</title>
<indexterm><primary>gen_inorder</primary><secondary>layers</secondary></indexterm>
<indexterm><primary>layers</primary><secondary>gen_inorder</secondary></indexterm>
<para><computeroutput>subroutine layers::gen_inorder (class(<link linkend="_structlayers_1_1layers__tree">layers_tree</link>), intent(inout) this, type(<link linkend="_structlayers_1_1layer">layer</link>), intent(in), pointer tmp, integer, intent(inout) limit, integer, intent(in) unit)</computeroutput></para><para>

<para>Subroutine to generate the matrix of pixels of a layer. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>this</entry>
                                <entry>
<para>Layers tree </para>
</entry>
                            </row>
                            <row>
                                <entry>tmp</entry>
                                <entry>
<para>Layer </para>
</entry>
                            </row>
                            <row>
                                <entry>limit</entry>
                                <entry>
<para>Limit of layers to traverse </para>
</entry>
                            </row>
                            <row>
                                <entry>unit</entry>
                                <entry>
<para>Unit to write the matrix </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 65 of file layers.f90.</para>
    </section><anchor xml:id="_namespacelayers_1a62fdd4967404ab3716c20c7d26b5c85a"/>    <section>
    <title>gen_postorder()</title>
<indexterm><primary>gen_postorder</primary><secondary>layers</secondary></indexterm>
<indexterm><primary>layers</primary><secondary>gen_postorder</secondary></indexterm>
<para><computeroutput>subroutine layers::gen_postorder (class(<link linkend="_structlayers_1_1layers__tree">layers_tree</link>), intent(inout) this, type(<link linkend="_structlayers_1_1layer">layer</link>), intent(in), pointer tmp, integer, intent(inout) limit, integer, intent(in) unit)</computeroutput></para><para>

<para>Subroutine to generate the matrix of pixels of a layer. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>this</entry>
                                <entry>
<para>Layers tree </para>
</entry>
                            </row>
                            <row>
                                <entry>tmp</entry>
                                <entry>
<para>Layer </para>
</entry>
                            </row>
                            <row>
                                <entry>limit</entry>
                                <entry>
<para>Limit of layers to traverse </para>
</entry>
                            </row>
                            <row>
                                <entry>unit</entry>
                                <entry>
<para>Unit to write the matrix </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 91 of file layers.f90.</para>
    </section><anchor xml:id="_namespacelayers_1a0ed365f0b16095d163777f59de1df24e"/>    <section>
    <title>gen_preorder()</title>
<indexterm><primary>gen_preorder</primary><secondary>layers</secondary></indexterm>
<indexterm><primary>layers</primary><secondary>gen_preorder</secondary></indexterm>
<para><computeroutput>subroutine layers::gen_preorder (class(<link linkend="_structlayers_1_1layers__tree">layers_tree</link>), intent(inout) this, type(<link linkend="_structlayers_1_1layer">layer</link>), intent(in), pointer tmp, integer, intent(inout) limit, integer, intent(in) unit)</computeroutput></para><para>

<para>Subroutine to generate the matrix of pixels of a layer. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>this</entry>
                                <entry>
<para>Layers tree </para>
</entry>
                            </row>
                            <row>
                                <entry>tmp</entry>
                                <entry>
<para>Layer </para>
</entry>
                            </row>
                            <row>
                                <entry>limit</entry>
                                <entry>
<para>Limit of layers to traverse </para>
</entry>
                            </row>
                            <row>
                                <entry>unit</entry>
                                <entry>
<para>Unit to write the matrix </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 117 of file layers.f90.</para>
    </section><anchor xml:id="_namespacelayers_1a52cbda60e34fee30e8cce5cb87b7ad65"/>    <section>
    <title>inorder()</title>
<indexterm><primary>inorder</primary><secondary>layers</secondary></indexterm>
<indexterm><primary>layers</primary><secondary>inorder</secondary></indexterm>
<para><computeroutput>subroutine layers::inorder (class(<link linkend="_structlayers_1_1layers__tree">layers_tree</link>), intent(inout) this, type(<link linkend="_structlayers_1_1layer">layer</link>), intent(in), pointer tmp)</computeroutput></para><para>

<para>Subroutine to traverse the layers tree in inorder. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>this</entry>
                                <entry>
<para>Layers tree </para>
</entry>
                            </row>
                            <row>
                                <entry>tmp</entry>
                                <entry>
<para>Layer </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 323 of file layers.f90.</para>
    </section><anchor xml:id="_namespacelayers_1a979adcf17af1e6b9b660725b2a018db4"/>    <section>
    <title>inorder_print()</title>
<indexterm><primary>inorder_print</primary><secondary>layers</secondary></indexterm>
<indexterm><primary>layers</primary><secondary>inorder_print</secondary></indexterm>
<para><computeroutput>subroutine layers::inorder_print (class(<link linkend="_structlayers_1_1layers__tree">layers_tree</link>), intent(inout) this, type(<link linkend="_structlayers_1_1layer">layer</link>), intent(in), pointer tmp)</computeroutput></para><para>

<para>Subroutine to print the layers of the layers tree in inorder. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>this</entry>
                                <entry>
<para>Layers tree </para>
</entry>
                            </row>
                            <row>
                                <entry>tmp</entry>
                                <entry>
<para>Layer </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 460 of file layers.f90.</para>
    </section><anchor xml:id="_namespacelayers_1a86fec7533cdf35f649ae2d3398386907"/>    <section>
    <title>is_empty()</title>
<indexterm><primary>is_empty</primary><secondary>layers</secondary></indexterm>
<indexterm><primary>layers</primary><secondary>is_empty</secondary></indexterm>
<para><computeroutput>logical function layers::is_empty (class(<link linkend="_structlayers_1_1queue">queue</link>), intent(in) this)</computeroutput></para><para>

<para>Function to check if the queue is empty. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>this</entry>
                                <entry>
<para>Queue </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>res Logical value </para>

<para>Logical value </para>
</formalpara>
</para>
<para>
Definition at line 195 of file layers.f90.</para>
    </section><anchor xml:id="_namespacelayers_1a815df7ccd4cede1692c60ec1e4cb86eb"/>    <section>
    <title>leaf_layers()</title>
<indexterm><primary>leaf_layers</primary><secondary>layers</secondary></indexterm>
<indexterm><primary>layers</primary><secondary>leaf_layers</secondary></indexterm>
<para><computeroutput>subroutine layers::leaf_layers (class(<link linkend="_structlayers_1_1layers__tree">layers_tree</link>), intent(inout) this)</computeroutput></para><para>

<para>Subroutine to traverse the leaf layers of the layers tree. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>this</entry>
                                <entry>
<para>Layers tree </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 416 of file layers.f90.</para>
    </section><anchor xml:id="_namespacelayers_1ac93277cfc9c8e94020013f78bfb5aad8"/>    <section>
    <title>leaf_layers_rec()</title>
<indexterm><primary>leaf_layers_rec</primary><secondary>layers</secondary></indexterm>
<indexterm><primary>layers</primary><secondary>leaf_layers_rec</secondary></indexterm>
<para><computeroutput>subroutine layers::leaf_layers_rec (class(<link linkend="_structlayers_1_1layers__tree">layers_tree</link>), intent(inout) this, type(<link linkend="_structlayers_1_1layer">layer</link>), intent(in), pointer tmp)</computeroutput></para><para>

<para>Subroutine to traverse the leaf layers of the layers tree recursively. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>this</entry>
                                <entry>
<para>Layers tree </para>
</entry>
                            </row>
                            <row>
                                <entry>tmp</entry>
                                <entry>
<para>Layer </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 428 of file layers.f90.</para>
    </section><anchor xml:id="_namespacelayers_1a1071675842783fc100b474fb4d4ac20c"/>    <section>
    <title>list_layers()</title>
<indexterm><primary>list_layers</primary><secondary>layers</secondary></indexterm>
<indexterm><primary>layers</primary><secondary>list_layers</secondary></indexterm>
<para><computeroutput>subroutine layers::list_layers (class(<link linkend="_structlayers_1_1layers__tree">layers_tree</link>), intent(inout) this, integer, intent(in) option)</computeroutput></para><para>

<para>Subroutine to list the layers of the layers tree. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>this</entry>
                                <entry>
<para>Layers tree </para>
</entry>
                            </row>
                            <row>
                                <entry>option</entry>
                                <entry>
<para>Option to list the layers </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 443 of file layers.f90.</para>
    </section><anchor xml:id="_namespacelayers_1a414a6810bc1629cc5c9340c10ed841d7"/>    <section>
    <title>max_depth()</title>
<indexterm><primary>max_depth</primary><secondary>layers</secondary></indexterm>
<indexterm><primary>layers</primary><secondary>max_depth</secondary></indexterm>
<para><computeroutput>subroutine layers::max_depth (class(<link linkend="_structlayers_1_1layers__tree">layers_tree</link>), intent(inout) this)</computeroutput></para><para>

<para>Subroutine to calculate the max depth of the layers tree. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>this</entry>
                                <entry>
<para>Layers tree </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 382 of file layers.f90.</para>
    </section><anchor xml:id="_namespacelayers_1a8fb9ba5d1bd2e6405b2546d0a23d202e"/>    <section>
    <title>max_depth_rec()</title>
<indexterm><primary>max_depth_rec</primary><secondary>layers</secondary></indexterm>
<indexterm><primary>layers</primary><secondary>max_depth_rec</secondary></indexterm>
<para><computeroutput>recursive integer function layers::max_depth_rec (class(<link linkend="_structlayers_1_1layers__tree">layers_tree</link>), intent(inout) this, type(<link linkend="_structlayers_1_1layer">layer</link>), intent(in), pointer root)</computeroutput></para><para>

<para>Function to calculate the max depth of the layers tree recursively. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>this</entry>
                                <entry>
<para>Layers tree </para>
</entry>
                            </row>
                            <row>
                                <entry>root</entry>
                                <entry>
<para>Root of the tree </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>depth Depth of the tree </para>
</formalpara>
</para>
<para>
Definition at line 397 of file layers.f90.</para>
    </section><anchor xml:id="_namespacelayers_1a610f099d68d513f92fd43c602ed00fc1"/>    <section>
    <title>postorder()</title>
<indexterm><primary>postorder</primary><secondary>layers</secondary></indexterm>
<indexterm><primary>layers</primary><secondary>postorder</secondary></indexterm>
<para><computeroutput>subroutine layers::postorder (class(<link linkend="_structlayers_1_1layers__tree">layers_tree</link>), intent(inout) this, type(<link linkend="_structlayers_1_1layer">layer</link>), intent(in), pointer tmp)</computeroutput></para><para>

<para>Subroutine to traverse the layers tree in postorder. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>this</entry>
                                <entry>
<para>Layers tree </para>
</entry>
                            </row>
                            <row>
                                <entry>tmp</entry>
                                <entry>
<para>Layer </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 336 of file layers.f90.</para>
    </section><anchor xml:id="_namespacelayers_1aaf614f9b9b7fe9bbf2b3d279c55476be"/>    <section>
    <title>preorder()</title>
<indexterm><primary>preorder</primary><secondary>layers</secondary></indexterm>
<indexterm><primary>layers</primary><secondary>preorder</secondary></indexterm>
<para><computeroutput>subroutine layers::preorder (class(<link linkend="_structlayers_1_1layers__tree">layers_tree</link>), intent(inout) this, type(<link linkend="_structlayers_1_1layer">layer</link>), intent(in), pointer tmp)</computeroutput></para><para>

<para>Subroutine to traverse the layers tree in preorder. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>this</entry>
                                <entry>
<para>Layers tree </para>
</entry>
                            </row>
                            <row>
                                <entry>tmp</entry>
                                <entry>
<para>Layer </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 309 of file layers.f90.</para>
    </section><anchor xml:id="_namespacelayers_1a20d88ea9094c055aff2beca2e47c8e8d"/>    <section>
    <title>search()</title>
<indexterm><primary>search</primary><secondary>layers</secondary></indexterm>
<indexterm><primary>layers</primary><secondary>search</secondary></indexterm>
<para><computeroutput>type(<link linkend="_structlayers_1_1layer">layer</link>) function, pointer layers::search (class(<link linkend="_structlayers_1_1layers__tree">layers_tree</link>), intent(inout) this, integer, intent(in) id_searched)</computeroutput></para><para>

<para>Function to search a layer in the layers tree. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>this</entry>
                                <entry>
<para>Layers tree </para>
</entry>
                            </row>
                            <row>
                                <entry>id_searched</entry>
                                <entry>
<para>Id of the layer to search </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>tmp Layer found </para>
</formalpara>
</para>
<para>
Definition at line 286 of file layers.f90.</para>
    </section><anchor xml:id="_namespacelayers_1a04b07ea98c9c0ed5bc02aac48658da24"/>    <section>
    <title>traverse_limited()</title>
<indexterm><primary>traverse_limited</primary><secondary>layers</secondary></indexterm>
<indexterm><primary>layers</primary><secondary>traverse_limited</secondary></indexterm>
<para><computeroutput>subroutine layers::traverse_limited (class(<link linkend="_structlayers_1_1layers__tree">layers_tree</link>), intent(inout) this, integer, intent(in) order, integer, intent(inout) limit, integer, intent(in) unit)</computeroutput></para><para>

<para>Subroutine to traverse the layers tree in a limited way. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>this</entry>
                                <entry>
<para>Layers tree </para>
</entry>
                            </row>
                            <row>
                                <entry>order</entry>
                                <entry>
<para>Order of traversal </para>
</entry>
                            </row>
                            <row>
                                <entry>limit</entry>
                                <entry>
<para>Limit of layers to traverse </para>
</entry>
                            </row>
                            <row>
                                <entry>unit</entry>
                                <entry>
<para>Unit to write the matrix </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 142 of file layers.f90.</para>
    </section><anchor xml:id="_namespacelayers_1a5e8ff04682cfccb6a7ef9d5f76e8fe21"/>    <section>
    <title>traverse_matrix()</title>
<indexterm><primary>traverse_matrix</primary><secondary>layers</secondary></indexterm>
<indexterm><primary>layers</primary><secondary>traverse_matrix</secondary></indexterm>
<para><computeroutput>subroutine layers::traverse_matrix (class(<link linkend="_structlayers_1_1layers__tree">layers_tree</link>), intent(inout) this)</computeroutput></para><para>

<para>Subroutine to traverse the layers tree. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters                    </title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
                                <entry>this</entry>
                                <entry>
<para>Layers tree </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Definition at line 202 of file layers.f90.</para>
</section>
</section>
</section>
