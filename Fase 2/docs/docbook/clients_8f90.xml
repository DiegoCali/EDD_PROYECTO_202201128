<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_clients_8f90" xml:lang="en-US">
<title>/home/diego/Documents/EDD/Fase 2 Documentation/src/clients.f90 File Reference</title>
<indexterm><primary>/home/diego/Documents/EDD/Fase 2 Documentation/src/clients.f90</primary></indexterm>
<para>

<para>Module to manage clients in a B-tree. </para>
 
</para>
<simplesect>
    <title>Data Types    </title>
        <itemizedlist>
            <listitem><para>type <link linkend="_structclients_1_1client">clients::client</link></para>

<para>Type to represent a client. </para>
</listitem>
            <listitem><para>type <link linkend="_structclients_1_1nodeptr">clients::nodeptr</link></para>

<para>Type to represent a node pointer. </para>
</listitem>
            <listitem><para>type <link linkend="_structclients_1_1btreenode">clients::btreenode</link></para>

<para>Type to represent a B-tree node. </para>
</listitem>
            <listitem><para>type <link linkend="_structclients_1_1btree__clients">clients::btree_clients</link></para>

<para>Type to represent a B-tree. </para>
</listitem>
            <listitem><para>type <link linkend="_structclients_1_1q__node">clients::q_node</link></para>

<para>Type to represent a queue node. </para>
</listitem>
            <listitem><para>type <link linkend="_structclients_1_1client__queue">clients::client_queue</link></para>

<para>Type to represent a client queue. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Modules    </title>
        <itemizedlist>
            <listitem><para>module <link linkend="_namespaceclients">clients</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions/Subroutines    </title>
        <itemizedlist>
            <listitem><para>subroutine <link linkend="_namespaceclients_1a9d6d1c448586304034f0c9dc5f953bb3">clients::amplitude_traversal</link> (this)</para>

<para>Subroutine to traverse the tree in amplitude. </para>
</listitem>
            <listitem><para>logical function <link linkend="_namespaceclients_1aeb3cbc2579866895c57c1dcc4c896055">clients::is_empty</link> (this)</para>

<para>Function to check if the queue is empty. </para>
</listitem>
            <listitem><para>type(btreenode) function, pointer <link linkend="_namespaceclients_1a1a7fece66e992a6f845ac2b912c7f5cf">clients::dequeue</link> (this)</para>

<para>Function to dequeue a node from the queue. </para>
</listitem>
            <listitem><para>subroutine <link linkend="_namespaceclients_1a1e9f4bdd12f3eba9cd93b6a4444e7d98">clients::enqueue</link> (this, tree_node)</para>

<para>Subroutine to enqueue a node in the queue. </para>
</listitem>
            <listitem><para>subroutine <link linkend="_namespaceclients_1a055cd07c771b226546e795d13346acce">clients::add_client</link> (this, new_client)</para>

<para>Subroutine to add a client to the tree. </para>
</listitem>
            <listitem><para>recursive logical function <link linkend="_namespaceclients_1af25c1268d66c531c2dbeea18f0fdd870">clients::set_value</link> (new_client, pclient, node, child)</para>

<para>Recursive function to set the value of the tree. </para>
</listitem>
            <listitem><para>type(btreenode) function, pointer <link linkend="_namespaceclients_1a64af5f8d56807a670e2533474f998526">clients::create_node</link> (this, new_client, child)</para>

<para>Function to create a node. </para>
</listitem>
            <listitem><para>subroutine <link linkend="_namespaceclients_1aa44cf096a2cb7660812a0d89d38ba962">clients::insert_node</link> (pclient, pos, node, child)</para>

<para>Subroutine to insert a node. </para>
</listitem>
            <listitem><para>subroutine <link linkend="_namespaceclients_1a987160082804c4f6978ef2a39b844eef">clients::split_node</link> (new_client, pclient, pos, node, child, new_node)</para>

<para>Subroutine to split a node. </para>
</listitem>
            <listitem><para>subroutine <link linkend="_namespaceclients_1ac2237e9b2930d1c37f46be5ba7fd088b">clients::traversal</link> (this, node)</para>

<para>Subroutine to traverse the tree. </para>
</listitem>
            <listitem><para>subroutine <link linkend="_namespaceclients_1aefc8bdbca2df7b11d0c6b79ec742e879">clients::clients_dot</link> (this, node, unit)</para>

<para>Subroutine to print the tree in dot format. </para>
</listitem>
            <listitem><para>recursive type(client) function, pointer <link linkend="_namespaceclients_1a21366d81ec050b2e122842e7a3542510">clients::search_client</link> (this, node, client_id)</para>

<para>Function to search a client in the tree. </para>
</listitem>
            <listitem><para>subroutine <link linkend="_namespaceclients_1a7466da5b7337fb37c4caaed5d0840f52">clients::delete_client</link> (this, client_id)</para>

<para>Subroutine to delete a client from the tree. </para>
</listitem>
            <listitem><para>subroutine <link linkend="_namespaceclients_1aaddc330226dc5edb325631eaf57434ed">clients::delete_client_rec</link> (this, father, temp, client_id)</para>

<para>Recursive subroutine to delete a client from the tree. </para>
</listitem>
            <listitem><para>logical function <link linkend="_namespaceclients_1a49266ea8ed56e42af7c1e0419a87c427">clients::find</link> (this, client_id)</para>

<para>Function to find a client in the node. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>integer <link linkend="_namespaceclients_1aedc33217218a7a1642994c7c673660d5">clients::g_id</link> = 1</para>

<para>Global variable to assign the id of the nodes. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Module to manage clients in a B-tree. </para>

<para><formalpara><title>Author</title>

<para>Diego Cali </para>
</formalpara>
<formalpara><title>Date</title>

<para>2024 </para>
</formalpara>
<formalpara><title>Version</title>

<para>1.0</para>
</formalpara>
This module contains the definition of the clients module, which is used to manage clients in a B-tree. The module contains the definition of the client type, which contains the name, dpi, password, and the albums and layers of the client. The module also contains the definition of the B-tree node type, which contains the clients and links to other nodes. The module contains the definition of the B-tree type, which contains the root of the tree. The module contains the definition of the node pointer type, which is used to traverse the tree. The module contains the definition of the queue node type, which is used to traverse the tree in amplitude. The module contains the definition of the client queue type, which is used to traverse the tree in amplitude. The module contains the definition of the functions and subroutines to add, search, delete, traverse, and print the tree. The module contains the definition of the functions and subroutines to insert, split, and set the value of the tree. The module contains the definition of the functions and subroutines to enqueue, dequeue, and check if the queue is empty </para>
</section>
</section>
